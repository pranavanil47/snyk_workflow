name: Snyk Security Scans

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: {}

jobs:
  snyk-security-scans:
    name: Snyk Security Scans
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      security-events: write
    env:
      SNYK_TOKEN: ${{ secrets.SNYK_API_TOKEN }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Snyk CLI
        run: |
          npm install -g snyk
          snyk auth ${{ secrets.SNYK_API_TOKEN }}

      - name: Setup SSH for file upload
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 34.57.235.175 >> ~/.ssh/known_hosts

      - name: Create reports directory
        run: mkdir -p security-reports

      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

      # Snyk Code Scan (SAST + SCA)
      - name: Run Snyk Code Scan (SAST + SCA)
        id: snyk_code
        continue-on-error: true
        run: |
          TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
          snyk code test \
            --json \
            --json-file-output=security-reports/snyk-code-${TIMESTAMP}.json \
            --severity-threshold=low \
            || true
          echo "code_file=snyk-code-${TIMESTAMP}.json" >> $GITHUB_OUTPUT

      # Snyk Container Scan
      - name: Build Docker image for container scan
        continue-on-error: true
        run: |
          # Check if Dockerfile exists, if not create a simple one for scanning
          if [ ! -f Dockerfile ]; then
            echo "FROM node:18-alpine" > Dockerfile
            echo "WORKDIR /app" >> Dockerfile
            echo "COPY package*.json ./" >> Dockerfile
            # Use npm install instead of npm ci if package-lock.json doesn't exist
            if [ -f package-lock.json ]; then
              echo "RUN npm ci --only=production" >> Dockerfile
            else
              echo "RUN npm install --only=production" >> Dockerfile
            fi
            echo "COPY . ." >> Dockerfile
            echo "CMD [\"npm\", \"start\"]" >> Dockerfile
          fi
          docker build -t snyk-scan-image .

      - name: Run Snyk Container Scan
        id: snyk_container
        continue-on-error: true
        run: |
          TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
          snyk container test snyk-scan-image \
            --json \
            --json-file-output=security-reports/snyk-container-${TIMESTAMP}.json \
            --severity-threshold=low \
            || true
          echo "container_file=snyk-container-${TIMESTAMP}.json" >> $GITHUB_OUTPUT

      # Snyk Open Source (Dependencies) Scan
      - name: Install dependencies for dependency scan
        continue-on-error: true
        run: |
          if [ -f package.json ]; then
            # Generate package-lock.json if it doesn't exist
            if [ ! -f package-lock.json ]; then
              npm install
            else
              npm ci
            fi
          elif [ -f requirements.txt ]; then
            pip install -r requirements.txt
          elif [ -f pom.xml ]; then
            mvn install -DskipTests
          elif [ -f Gemfile ]; then
            bundle install
          fi

      - name: Run Snyk Open Source Scan
        id: snyk_open_source
        continue-on-error: true
        run: |
          TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
          snyk test \
            --json \
            --json-file-output=security-reports/snyk-dependencies-${TIMESTAMP}.json \
            --severity-threshold=low \
            || true
          echo "deps_file=snyk-dependencies-${TIMESTAMP}.json" >> $GITHUB_OUTPUT

      # Generate SBOM
      - name: Generate SBOM with Snyk
        id: snyk_sbom
        continue-on-error: true
        run: |
          TIMESTAMP=${{ steps.timestamp.outputs.timestamp }}
          snyk sbom \
            --format=spdx2.3+json \
            --json-file-output=security-reports/snyk-sbom-${TIMESTAMP}.json \
            || true
          echo "sbom_file=snyk-sbom-${TIMESTAMP}.json" >> $GITHUB_OUTPUT

      # Upload results to VM
      - name: Upload Snyk Code results to VM
        if: steps.snyk_code.outputs.code_file
        run: |
          FILE_NAME=${{ steps.snyk_code.outputs.code_file }}
          scp -i ~/.ssh/id_rsa security-reports/$FILE_NAME \
            pranavanil123@34.57.235.175:/home/pranavanil123/findings/Snyk_SAST/

      - name: Upload Snyk Container results to VM
        if: steps.snyk_container.outputs.container_file
        run: |
          FILE_NAME=${{ steps.snyk_container.outputs.container_file }}
          scp -i ~/.ssh/id_rsa security-reports/$FILE_NAME \
            pranavanil123@34.57.235.175:/home/pranavanil123/findings/Snyk_container_scan/

      - name: Upload Snyk Dependencies results to VM
        if: steps.snyk_open_source.outputs.deps_file
        run: |
          FILE_NAME=${{ steps.snyk_open_source.outputs.deps_file }}
          scp -i ~/.ssh/id_rsa security-reports/$FILE_NAME \
            pranavanil123@34.57.235.175:/home/pranavanil123/findings/Snyk_Code/

      - name: Upload SBOM to VM
        if: steps.snyk_sbom.outputs.sbom_file
        run: |
          FILE_NAME=${{ steps.snyk_sbom.outputs.sbom_file }}
          scp -i ~/.ssh/id_rsa security-reports/$FILE_NAME \
            pranavanil123@34.57.235.175:/home/pranavanil123/findings/Snyk_SBOM/

      # Summary step
      - name: Scan Summary
        run: |
          echo "=== Snyk Security Scans Completed ==="
          echo "Timestamp: ${{ steps.timestamp.outputs.timestamp }}"
          echo "Code Scan (SAST): ${{ steps.snyk_code.outputs.code_file || 'Failed' }}"
          echo "Container Scan: ${{ steps.snyk_container.outputs.container_file || 'Failed' }}"
          echo "Dependencies Scan: ${{ steps.snyk_open_source.outputs.deps_file || 'Failed' }}"
          echo "SBOM Generation: ${{ steps.snyk_sbom.outputs.sbom_file || 'Failed' }}"

      # Optional: Comment on PR with scan summary
      - name: Comment PR with scan results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const timestamp = '${{ steps.timestamp.outputs.timestamp }}';
            const codeFile = '${{ steps.snyk_code.outputs.code_file }}' || 'Failed';
            const containerFile = '${{ steps.snyk_container.outputs.container_file }}' || 'Failed';
            const depsFile = '${{ steps.snyk_open_source.outputs.deps_file }}' || 'Failed';
            const sbomFile = '${{ steps.snyk_sbom.outputs.sbom_file }}' || 'Failed';
            
            const body = `## üîí Snyk Security Scan Results
            
            **Scan Timestamp:** ${timestamp}
            
            | Scan Type | Status | File |
            |-----------|--------|------|
            | Code (SAST) | ${codeFile !== 'Failed' ? '‚úÖ' : '‚ùå'} | ${codeFile} |
            | Container | ${containerFile !== 'Failed' ? '‚úÖ' : '‚ùå'} | ${containerFile} |
            | Dependencies | ${depsFile !== 'Failed' ? '‚úÖ' : '‚ùå'} | ${depsFile} |
            | SBOM | ${sbomFile !== 'Failed' ? '‚úÖ' : '‚ùå'} | ${sbomFile} |
            
            Results uploaded to VM at 34.57.235.175`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
